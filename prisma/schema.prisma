// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Membership    Membership[]
  Member        Member[]
  attendance    Attendance[]
  attendanceLog AttendanceLog[]
  Item          Item[]
  ItemBoughtLog ItemBoughtLog[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Membership {
  id        Int      @id @default(autoincrement())
  name      String
  length    Int
  cost      Int
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Member    Member[]

  @@map("membership")
}

model Member {
  id              Int             @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String
  mobileNumber    String?
  memberStatus    MemberStatus    @default(INACTIVE)
  membershipId    Int?
  membership      Membership?     @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipStart DateTime?       @default(now())
  membershipEnd   DateTime?       @default(now())
  createdBy       String
  user            User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  attendance      Attendance?
  ItemBoughtLog   ItemBoughtLog[]

  @@map("member")
}

enum MemberStatus {
  INACTIVE
  ACTIVE
  EXPIRED
  SUSPENDED
}

model Attendance {
  id            Int             @id @default(autoincrement())
  memberId      Int             @unique
  member        Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  activeSession Boolean         @default(false)
  lastActive    DateTime?
  createdBy     String
  user          User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  attendanceLog AttendanceLog[]

  @@map("attendance")
}

model AttendanceLog {
  id             Int            @id @default(autoincrement())
  attendanceId   Int
  attendance     Attendance     @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  attendanceType AttendanceType
  createdBy      String
  user           User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("attendance_log")
}

enum AttendanceType {
  SESSION_STARTED
  SESSION_ENDED
}

model Item {
  id            Int             @id @default(autoincrement())
  name          String
  price         Int
  stocks        Int
  createdBy     String
  user          User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ItemBoughtLog ItemBoughtLog[]

  @@map("item")
}

model ItemBoughtLog {
  id        Int      @id @default(autoincrement())
  itemId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  boughtBy  Int?
  member    Member?  @relation(fields: [boughtBy], references: [id], onDelete: Cascade)
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("item_bought_log")
}
