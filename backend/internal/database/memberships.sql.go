// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: memberships.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const countMemberships = `-- name: CountMemberships :one
SELECT COUNT(*) as total_memberships
FROM memberships
`

func (q *Queries) CountMemberships(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countMemberships)
	var total_memberships int64
	err := row.Scan(&total_memberships)
	return total_memberships, err
}

const createMembership = `-- name: CreateMembership :one
INSERT INTO memberships (
    membership_name, membership_length, created_by
) VALUES (
    $1, $2, $3
)
RETURNING id, membership_name, membership_length, created_by, version
`

type CreateMembershipParams struct {
	MembershipName   string `json:"membership_name"`
	MembershipLength *int32 `json:"membership_length"`
	CreatedBy        int64  `json:"created_by"`
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRow(ctx, createMembership, arg.MembershipName, arg.MembershipLength, arg.CreatedBy)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.MembershipName,
		&i.MembershipLength,
		&i.CreatedBy,
		&i.Version,
	)
	return i, err
}

const deleteMembership = `-- name: DeleteMembership :execresult
DELETE FROM memberships
WHERE id = $1 AND created_by = $2
`

type DeleteMembershipParams struct {
	ID        int64 `json:"id"`
	CreatedBy int64 `json:"created_by"`
}

func (q *Queries) DeleteMembership(ctx context.Context, arg DeleteMembershipParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteMembership, arg.ID, arg.CreatedBy)
}

const getMembershipByID = `-- name: GetMembershipByID :one
SELECT id, membership_name, membership_length, created_by, version FROM memberships
WHERE id = $1 AND created_by = $2
`

type GetMembershipByIDParams struct {
	ID        int64 `json:"id"`
	CreatedBy int64 `json:"created_by"`
}

func (q *Queries) GetMembershipByID(ctx context.Context, arg GetMembershipByIDParams) (Membership, error) {
	row := q.db.QueryRow(ctx, getMembershipByID, arg.ID, arg.CreatedBy)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.MembershipName,
		&i.MembershipLength,
		&i.CreatedBy,
		&i.Version,
	)
	return i, err
}

const getMemberships = `-- name: GetMemberships :many
SELECT id, membership_name, membership_length, created_by, version FROM memberships
WHERE created_by = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type GetMembershipsParams struct {
	CreatedBy int64 `json:"created_by"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetMemberships(ctx context.Context, arg GetMembershipsParams) ([]Membership, error) {
	rows, err := q.db.Query(ctx, getMemberships, arg.CreatedBy, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.MembershipName,
			&i.MembershipLength,
			&i.CreatedBy,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembership = `-- name: UpdateMembership :one
UPDATE memberships
    set membership_name = $4,
    membership_length = $5,
    version = version + 1
WHERE id = $1 AND created_by = $2 AND version = $3
RETURNING version
`

type UpdateMembershipParams struct {
	ID               int64  `json:"id"`
	CreatedBy        int64  `json:"created_by"`
	Version          int32  `json:"version"`
	MembershipName   string `json:"membership_name"`
	MembershipLength *int32 `json:"membership_length"`
}

func (q *Queries) UpdateMembership(ctx context.Context, arg UpdateMembershipParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateMembership,
		arg.ID,
		arg.CreatedBy,
		arg.Version,
		arg.MembershipName,
		arg.MembershipLength,
	)
	var version int32
	err := row.Scan(&version)
	return version, err
}
