// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: otps.sql

package database

import (
	"context"
)

const createOtp = `-- name: CreateOtp :one
INSERT INTO otps (
    code, type, user_id
) VALUES (
    $1, $2, $3
) RETURNING id, code, type, expires_at, user_id
`

type CreateOtpParams struct {
	Code   int64   `json:"code"`
	Type   OtpType `json:"type"`
	UserID int64   `json:"user_id"`
}

func (q *Queries) CreateOtp(ctx context.Context, arg CreateOtpParams) (Otp, error) {
	row := q.db.QueryRow(ctx, createOtp, arg.Code, arg.Type, arg.UserID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Type,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const deleteOtps = `-- name: DeleteOtps :exec
DELETE FROM otps WHERE user_id = $1
`

func (q *Queries) DeleteOtps(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteOtps, userID)
	return err
}

const getOtpByCode = `-- name: GetOtpByCode :one
SELECT id, code, type, expires_at, user_id FROM otps WHERE code = $1
`

func (q *Queries) GetOtpByCode(ctx context.Context, code int64) (Otp, error) {
	row := q.db.QueryRow(ctx, getOtpByCode, code)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Type,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}
